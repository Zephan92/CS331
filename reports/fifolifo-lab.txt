Lab report for Stack and Queue Lab - zjohnson
Timestamp: 2013-10-22 00:09:08

|  :scenario |                                  :title |                              :result | :score |
|------------+-----------------------------------------+--------------------------------------+--------|
|    working |   Test student code vs instructor tests |                                 Fail |     38 |
| qualifying |   Test student tests vs instructor code |                                 Pass |      5 |
|    broke-1 |            Push doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-2 |       Pop of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-3 |            Pop doesn't remove elements. | Pass: Student tests detected errors. |      5 |
|    broke-4 |                  Pop reverses elements. | Pass: Student tests detected errors. |      5 |
|    broke-5 |         Enqueue doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-6 |   Dequeue of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-7 |  Dequeue doesn't reverse when flipping. | Pass: Student tests detected errors. |      5 |
|    broke-8 | Dequeue doesn't dequeue after flipping. | Pass: Student tests detected errors. |      5 |
|    broke-9 |            Flipping doesn't erase back. | Pass: Student tests detected errors. |      5 |
|   broke-10 |             Queue behaves like a stack. | Pass: Student tests detected errors. |      5 |
|      total |                             Total Score |                                      |     93 |

Details:


** Details for Test student code vs instructor tests

.................FFF

Failures:

  1) Queues should keep track of their size.
     java.lang.Long cannot be cast to clojure.lang.IFn
     java.lang.ClassCastException: java.lang.Long cannot be cast to clojure.lang.IFn
     	at fifolifo.core$dequeue.invoke(core.clj:85)
     	at fifolifo.core_spec$eval1363$fn__1364$fn__1369.invoke(/home/grader/quarry/fifolifo-lab/zjohnson/working/spec/fifolifo/core_spec.clj:100)
     	... 42 stack levels elided ...

  2) Queues should pull things out in the correct order.
     Expected: (8 5 3 2 1)
          got: () (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/working/spec/fifolifo/core_spec.clj:107

  3) Queues should be able to enqueue things after dequeueping.
     java.lang.Long cannot be cast to clojure.lang.IFn
     java.lang.ClassCastException: java.lang.Long cannot be cast to clojure.lang.IFn
     	at fifolifo.core$dequeue.invoke(core.clj:85)
     	at fifolifo.core_spec$eval1363$fn__1364$fn__1385.invoke(/home/grader/quarry/fifolifo-lab/zjohnson/working/spec/fifolifo/core_spec.clj:111)
     	... 42 stack levels elided ...

Finished in 0.10848 seconds
20 examples, 3 failures


** Details for Test student tests vs instructor code

...................................

Finished in 0.03644 seconds
35 examples, 0 failures


** Details for Push doesn't increment size.

...FF..FF...FFF....................

Failures:

  1) The stack declaration should have a size of one when there is 1 element.
     Expected: 1
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-1/spec/fifolifo/core_spec.clj:24

  2) The stack declaration should have a size of three when there is 3 elements.
     Expected: 3
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-1/spec/fifolifo/core_spec.clj:27

  3) The stack declaration should return size of 1 when an element is pushed to the top of the list.
     Expected: 0
          got: 1 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-1/spec/fifolifo/core_spec.clj:39

  4) The stack declaration should return size of 3 when three elements are  pushed to the top of the list.
     Expected: 0
          got: 3 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-1/spec/fifolifo/core_spec.clj:43

  5) The stack declaration should return size 0 if 1 element is popped from a list with 1.
     Expected: -1
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-1/spec/fifolifo/core_spec.clj:59

  6) The stack declaration should return size 0 if all elements are popped from a list.
     Expected: -3
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-1/spec/fifolifo/core_spec.clj:63

  7) The stack declaration should return size 2 if 1 element is popped from a list with 3.
     Expected: -1
          got: 2 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-1/spec/fifolifo/core_spec.clj:67

Finished in 0.01561 seconds
35 examples, 7 failures


** Details for Pop of empty makes size negative.

....................F..............

Failures:

  1) The stack declaration should not be negative if an empty stack is popped.
     Expected: -1
     not to =: -1
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-2/spec/fifolifo/core_spec.clj:90

Finished in 0.02505 seconds
35 examples, 1 failures


** Details for Pop doesn't remove elements.

.........FFF......F................

Failures:

  1) The stack declaration should pop the first element on the list.
     Expected: (8 7)
          got: (9 8 7) (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-3/spec/fifolifo/core_spec.clj:47

  2) The stack declaration should pop two elements on the list.
     Expected: (7)
          got: (9 8 7) (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-3/spec/fifolifo/core_spec.clj:51

  3) The stack declaration should return an empty list if all elements in the list are popped.
     Expected: ()
          got: (9 8 7) (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-3/spec/fifolifo/core_spec.clj:55

  4) The stack declaration should be able to pop right after pushing.
     Expected: 9
          got: 8 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-3/spec/fifolifo/core_spec.clj:83

Finished in 0.14079 seconds
35 examples, 4 failures


** Details for Pop reverses elements.

.........FF....F..F................

Failures:

  1) The stack declaration should pop the first element on the list.
     Expected: (8 7)
          got: (9 8) (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-4/spec/fifolifo/core_spec.clj:47

  2) The stack declaration should pop two elements on the list.
     Expected: (7)
          got: (9) (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-4/spec/fifolifo/core_spec.clj:51

  3) The stack declaration should return the top of the list of 3 elements.
     Expected: 7
          got: 9 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-4/spec/fifolifo/core_spec.clj:71

  4) The stack declaration should be able to pop right after pushing.
     Expected: 9
          got: 8 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-4/spec/fifolifo/core_spec.clj:83

Finished in 0.07734 seconds
35 examples, 4 failures


** Details for Enqueue doesn't increment size.

........................FF...FFFFF.

Failures:

  1) The queue declaration should have a size of one when there is 1 element.
     Expected: 1
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-5/spec/fifolifo/core_spec.clj:107

  2) The queue declaration should have a size of three when there is 3 elements.
     Expected: 3
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-5/spec/fifolifo/core_spec.clj:110

  3) The queue declaration should not have elements in the back after dequeuing.
     Expected: nil
          got: (9 8 7) (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-5/spec/fifolifo/core_spec.clj:125

  4) The queue declaration should dequeue the front of the list by one.
     Expected: (8 9)
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-5/spec/fifolifo/core_spec.clj:129

  5) The queue declaration should be able to dequeue after enqueuing.
     Expected: 8
          got: 7 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-5/spec/fifolifo/core_spec.clj:133

  6) The queue declaration should be able to enqueue after dequeuing.
     Expected: (10)
          got: (10 9 8 7) (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-5/spec/fifolifo/core_spec.clj:137

  7) The queue declaration should be able to keep track of their size.
     Expected: 3
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-5/spec/fifolifo/core_spec.clj:141

Finished in 0.10998 seconds
35 examples, 7 failures


** Details for Dequeue of empty makes size negative.

..................................F

Failures:

  1) The queue declaration should not return a negative number after dequeing from an empty queue.
     Expected: -1
     not to =: -1
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-6/spec/fifolifo/core_spec.clj:144

Finished in 0.02568 seconds
35 examples, 1 failures


** Details for Dequeue doesn't reverse when flipping.

..........................F...F....

Failures:

  1) The queue declaration should have a FIFO order.
     Expected: 7
          got: 9 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-7/spec/fifolifo/core_spec.clj:114

  2) The queue declaration should dequeue the front of the list by one.
     Expected: (8 9)
          got: (8 7) (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-7/spec/fifolifo/core_spec.clj:129

Finished in 0.11779 seconds
35 examples, 2 failures


** Details for Dequeue doesn't dequeue after flipping.

..FFFFFFFFFFFFFFF.FF...FFFFF..FFFF.

Failures:

  1) The stack declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:21

  2) The stack declaration should have a size of one when there is 1 element.
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:24

  3) The stack declaration should have a size of three when there is 3 elements.
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:27

  4) The stack declaration should have a FILO order.
     Expected: (9 8 7)
          got: (9 [:top (8 [:top (7 [:top nil] [:size 0])] [:size 1])] [:size 2]) (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:31

  5) The stack declaration should push 1 element to the top of the list.
     Expected: (9 [:top nil] [:size 0])
          got: (9) (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:35

  6) The stack declaration should return size of 1 when an element is pushed to the top of the list.
     Expected: nil
          got: 1 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:39

  7) The stack declaration should return size of 3 when three elements are  pushed to the top of the list.
     Expected: nil
          got: 3 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:43

  8) The stack declaration should pop the first element on the list.
     Expected: (8 7)
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:47

  9) The stack declaration should pop two elements on the list.
     Expected: (7)
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:51

  10) The stack declaration should return an empty list if all elements in the list are popped.
     Expected: ()
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:55

  11) The stack declaration should return size 0 if 1 element is popped from a list with 1.
     Expected: nil
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:59

  12) The stack declaration should return size 0 if all elements are popped from a list.
     Expected: nil
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:63

  13) The stack declaration should return size 2 if 1 element is popped from a list with 3.
     Expected: nil
          got: 2 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:67

  14) The stack declaration should return the top of the list of 3 elements.
     Expected: 7
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:71

  15) The stack declaration should return the top of the list of 1 elements.
     Expected: 9
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:75

  16) The stack declaration should be able to pop right after pushing.
     Expected: 9
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:83

  17) The stack declaration should be able to push right after popping.
     
     java.lang.NullPointerException
     	... 2 stack levels elided ...
     	at fifolifo.core$push.invoke(core.clj:34)
     	at fifolifo.core_spec$eval1216$fn__1217$fn__1297.invoke(/home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:87)
     	... 42 stack levels elided ...

  18) The queue declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:104

  19) The queue declaration should have a size of one when there is 1 element.
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:107

  20) The queue declaration should have a size of three when there is 3 elements.
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:110

  21) The queue declaration should have a FIFO order.
     Expected: 7
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:114

  22) The queue declaration should the back of the queue should be back to front.
     Expected: (9 8 7)
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:118

  23) The queue declaration should dequeue the front of the list by one.
     Expected: (8 9)
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:129

  24) The queue declaration should be able to dequeue after enqueuing.
     Expected: 8
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:133

  25) The queue declaration should be able to enqueue after dequeuing.
     Expected: (10)
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:137

  26) The queue declaration should be able to keep track of their size.
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-8/spec/fifolifo/core_spec.clj:141

Finished in 0.25022 seconds
35 examples, 26 failures


** Details for Flipping doesn't erase back.

.............................F..F..

Failures:

  1) The queue declaration should not have elements in the back after dequeuing.
     Expected: nil
          got: (9 8 7) (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-9/spec/fifolifo/core_spec.clj:125

  2) The queue declaration should be able to enqueue after dequeuing.
     Expected: (10)
          got: (10 9 8 7) (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-9/spec/fifolifo/core_spec.clj:137

Finished in 0.15953 seconds
35 examples, 2 failures


** Details for Queue behaves like a stack.

..........................F..FF.F..

Failures:

  1) The queue declaration should have a FIFO order.
     Expected: 7
          got: 9 (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-10/spec/fifolifo/core_spec.clj:114

  2) The queue declaration should not have elements in the back after dequeuing.
     Expected: nil
          got: (8 7) (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-10/spec/fifolifo/core_spec.clj:125

  3) The queue declaration should dequeue the front of the list by one.
     Expected: (8 9)
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-10/spec/fifolifo/core_spec.clj:129

  4) The queue declaration should be able to enqueue after dequeuing.
     Expected: (10)
          got: (10 8 7) (using =)
     /home/grader/quarry/fifolifo-lab/zjohnson/broke-10/spec/fifolifo/core_spec.clj:137

Finished in 0.07221 seconds
35 examples, 4 failures
